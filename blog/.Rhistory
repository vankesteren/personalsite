Z_m <- svd_e$u %*% diag(soft(svd_e$d, lambda = lam)) %*% t(svd_e$v)
e <- Z_m[miss_idx]
lossvec[i] <- lossfun(e)
}
plot(lossvec, type = "l")
# data generation
p <- 10
n <- 100
Z <- Z_full <- MASS::mvrnorm(n, rep(0, p), rWishart(1, p, diag(p))[,,1])
miss_idx <- sample(n*p, size = round(n*p*0.1))
Z[miss_idx] <- NA
# approx algorithm from hastie tibshirani 2015 p 170
iter <- 1000
lossvec <- numeric(iter)
lossfun <- function(e) crossprod(e - Z_full[miss_idx])[1]
lam <- 5
e <- rnorm(length(miss_idx))
for (i in 1:iter) {
# e step
Z_e <- Z
Z_e[miss_idx] <- e
# m step
svd_e <- svd(Z_e)
Z_m <- svd_e$u %*% diag(soft(svd_e$d, lambda = lam)) %*% t(svd_e$v)
e <- Z_m[miss_idx]
lossvec[i] <- lossfun(e)
}
plot(lossvec, type = "l")
plot(x, soft(x, 4))
plot(x, soft(x, 4), type = "l")
plot(x, soft(x, 2), type = "l")
plot(x, soft(x, .5), type = "l")
x <- seq(-10, 10, length.out = 100)
plot(x, soft(x, .5), type = "l")
plot(x, soft(x, .4), type = "l")
plot(x, soft(x, 2.4), type = "l")
?pmax
vapply(abs(x) - lambda, function(x) max(x, 0), 1)
pmax(abs(x) - lambda, 0)
# matrix approximation
# Soft threshold function
soft <- function(x, lambda) sign(x) * pmax(abs(x) - lambda, 0)
# data generation
p <- 10
n <- 100
Z <- Z_full <- MASS::mvrnorm(n, rep(0, p), rWishart(1, p, diag(p))[,,1])
miss_idx <- sample(n*p, size = round(n*p*0.1))
Z[miss_idx] <- NA
# approx algorithm from hastie tibshirani 2015 p 170
iter <- 1000
lossvec <- numeric(iter)
lossfun <- function(e) crossprod(e - Z_full[miss_idx])[1]
lam <- 5
e <- rnorm(length(miss_idx))
for (i in 1:iter) {
# e step
Z_e <- Z
Z_e[miss_idx] <- e
# m step
svd_e <- svd(Z_e)
Z_m <- svd_e$u %*% diag(soft(svd_e$d, lambda = lam)) %*% t(svd_e$v)
e <- Z_m[miss_idx]
lossvec[i] <- lossfun(e)
}
plot(lossvec, type = "l")
# data generation
p <- 5
n <- 100
Z <- Z_full <- MASS::mvrnorm(n, rep(0, p), rWishart(1, p, diag(p))[,,1])
miss_idx <- sample(n*p, size = round(n*p*0.1))
Z[miss_idx] <- NA
# approx algorithm from hastie tibshirani 2015 p 170
iter <- 1000
lossvec <- numeric(iter)
lossfun <- function(e) crossprod(e - Z_full[miss_idx])[1]
lam <- 5
e <- rnorm(length(miss_idx))
for (i in 1:iter) {
# e step
Z_e <- Z
Z_e[miss_idx] <- e
# m step
svd_e <- svd(Z_e)
Z_m <- svd_e$u %*% diag(soft(svd_e$d, lambda = lam)) %*% t(svd_e$v)
e <- Z_m[miss_idx]
lossvec[i] <- lossfun(e)
}
plot(lossvec, type = "l")
e
Z_full[miss_idx]
# data generation
p <- 50
n <- 100
Z <- Z_full <- MASS::mvrnorm(n, rep(0, p), rWishart(1, p, diag(p))[,,1])
miss_idx <- sample(n*p, size = round(n*p*0.1))
Z[miss_idx] <- NA
# approx algorithm from hastie tibshirani 2015 p 170
iter <- 1000
lossvec <- numeric(iter)
lossfun <- function(e) crossprod(e - Z_full[miss_idx])[1]
lam <- 5
e <- rnorm(length(miss_idx))
for (i in 1:iter) {
# e step
Z_e <- Z
Z_e[miss_idx] <- e
# m step
svd_e <- svd(Z_e)
Z_m <- svd_e$u %*% diag(soft(svd_e$d, lambda = lam)) %*% t(svd_e$v)
e <- Z_m[miss_idx]
lossvec[i] <- lossfun(e)
}
plot(lossvec, type = "l")
# approx algorithm from hastie tibshirani 2015 p 170
iter <- 1000
lossvec <- numeric(iter)
lossfun <- function(e) crossprod(e - Z_full[miss_idx])[1]
lam <- 10
e <- rnorm(length(miss_idx))
for (i in 1:iter) {
# e step
Z_e <- Z
Z_e[miss_idx] <- e
# m step
svd_e <- svd(Z_e)
Z_m <- svd_e$u %*% diag(soft(svd_e$d, lambda = lam)) %*% t(svd_e$v)
e <- Z_m[miss_idx]
lossvec[i] <- lossfun(e)
}
plot(lossvec, type = "l")
# approx algorithm from hastie tibshirani 2015 p 170
iter <- 1000
lossvec <- numeric(iter)
lossfun <- function(e) crossprod(e - Z_full[miss_idx])[1]
lam <- 2
e <- rnorm(length(miss_idx))
for (i in 1:iter) {
# e step
Z_e <- Z
Z_e[miss_idx] <- e
# m step
svd_e <- svd(Z_e)
Z_m <- svd_e$u %*% diag(soft(svd_e$d, lambda = lam)) %*% t(svd_e$v)
e <- Z_m[miss_idx]
lossvec[i] <- lossfun(e)
}
plot(lossvec, type = "l")
plot(e - Z_full[miss_idx])
?rWishart
# data generation
p <- 50
n <- 100
Z <- Z_full <- MASS::mvrnorm(n, rep(0, p), rWishart(1, p, diag(rep(2, p)))[,,1])
miss_idx <- sample(n*p, size = round(n*p*0.1))
Z[miss_idx] <- NA
# approx algorithm from hastie tibshirani 2015 p 170
iter <- 1000
lossvec <- numeric(iter)
lossfun <- function(e) crossprod(e - Z_full[miss_idx])[1]
lam <- 2
e <- rnorm(length(miss_idx))
for (i in 1:iter) {
# e step
Z_e <- Z
Z_e[miss_idx] <- e
# m step
svd_e <- svd(Z_e)
Z_m <- svd_e$u %*% diag(soft(svd_e$d, lambda = lam)) %*% t(svd_e$v)
e <- Z_m[miss_idx]
lossvec[i] <- lossfun(e)
}
plot(lossvec, type = "l")
# data generation
p <- 50
n <- 100
Z <- Z_full <- MASS::mvrnorm(n, rep(0, p), rWishart(1, p, diag(rep(0.5, p)))[,,1])
miss_idx <- sample(n*p, size = round(n*p*0.1))
Z[miss_idx] <- NA
# approx algorithm from hastie tibshirani 2015 p 170
iter <- 1000
lossvec <- numeric(iter)
lossfun <- function(e) crossprod(e - Z_full[miss_idx])[1]
lam <- 2
e <- rnorm(length(miss_idx))
for (i in 1:iter) {
# e step
Z_e <- Z
Z_e[miss_idx] <- e
# m step
svd_e <- svd(Z_e)
Z_m <- svd_e$u %*% diag(soft(svd_e$d, lambda = lam)) %*% t(svd_e$v)
e <- Z_m[miss_idx]
lossvec[i] <- lossfun(e)
}
plot(lossvec, type = "l")
# data generation
p <- 50
n <- 100
Z <- Z_full <- MASS::mvrnorm(n, rep(0, p), rWishart(1, p, diag(rep(0.1, p)))[,,1])
miss_idx <- sample(n*p, size = round(n*p*0.1))
Z[miss_idx] <- NA
# approx algorithm from hastie tibshirani 2015 p 170
iter <- 1000
lossvec <- numeric(iter)
lossfun <- function(e) crossprod(e - Z_full[miss_idx])[1]
lam <- 2
e <- rnorm(length(miss_idx))
for (i in 1:iter) {
# e step
Z_e <- Z
Z_e[miss_idx] <- e
# m step
svd_e <- svd(Z_e)
Z_m <- svd_e$u %*% diag(soft(svd_e$d, lambda = lam)) %*% t(svd_e$v)
e <- Z_m[miss_idx]
lossvec[i] <- lossfun(e)
}
plot(lossvec, type = "l")
rWishart(1, p, diag(rep(0.1, p)))[,,1]
p <- 5
rWishart(1, p, diag(rep(0.1, p)))[,,1]
rWishart(1, p, diag(rep(10, p)))[,,1]
rWishart(1, p, diag(rep(0.1, p)))[,,1]
# data generation
p <- 50
n <- 100
Z <- Z_full <- MASS::mvrnorm(n, rep(0, p), rWishart(1, p, diag(rep(0.1, p)))[,,1])
miss_idx <- sample(n*p, size = round(n*p*0.1))
Z[miss_idx] <- NA
# approx algorithm from hastie tibshirani 2015 p 170
iter <- 1000
lossvec <- numeric(iter)
lossfun <- function(e) crossprod(e - Z_full[miss_idx])[1]
lam <- 2
e <- rnorm(length(miss_idx))
for (i in 1:iter) {
# e step
Z_e <- Z
Z_e[miss_idx] <- e
# m step
svd_e <- svd(Z_e)
Z_m <- svd_e$u %*% diag(soft(svd_e$d, lambda = lam)) %*% t(svd_e$v)
e <- Z_m[miss_idx]
lossvec[i] <- lossfun(e)
}
plot(lossvec, type = "l")
# approx algorithm from hastie tibshirani 2015 p 170
iter <- 1000
lossvec <- numeric(iter)
lossfun <- function(e) crossprod(e - Z_full[miss_idx])[1]
lam <- 1
e <- rnorm(length(miss_idx))
for (i in 1:iter) {
# e step
Z_e <- Z
Z_e[miss_idx] <- e
# m step
svd_e <- svd(Z_e)
Z_m <- svd_e$u %*% diag(soft(svd_e$d, lambda = lam)) %*% t(svd_e$v)
e <- Z_m[miss_idx]
lossvec[i] <- lossfun(e)
}
plot(lossvec, type = "l")
plot(e - Z_full[miss_idx])
# approx algorithm from hastie tibshirani 2015 p 170
iter <- 1000
lossvec <- numeric(iter)
lossfun <- function(e) crossprod(e - Z_full[miss_idx])[1]
lam <- 10
e <- rnorm(length(miss_idx))
for (i in 1:iter) {
# e step
Z_e <- Z
Z_e[miss_idx] <- e
# m step
svd_e <- svd(Z_e)
Z_m <- svd_e$u %*% diag(soft(svd_e$d, lambda = lam)) %*% t(svd_e$v)
e <- Z_m[miss_idx]
lossvec[i] <- lossfun(e)
}
plot(lossvec, type = "l")
plot(e - Z_full[miss_idx])
Z <- matrix(1, 20, 10)
svd_e <- svd(Z)
Z_m <- svd_e$u %*% diag(soft(svd_e$d, lambda = 5)) %*% t(svd_e$v)
Z_m
Z_m <- svd_e$u %*% diag(soft(svd_e$d, lambda = 1)) %*% t(svd_e$v)
Z_m
Z_m <- svd_e$u %*% diag(soft(svd_e$d, lambda = 0)) %*% t(svd_e$v)
Z_m
x
plot(x, soft(x, 4))
pmax
rmarkdown::render("rmdtest/multi-output.Rmd", output_format = "all")
knit_with_parameters('~/rmdtest/multi-output.Rmd')
knit_with_parameters('~/rmdtest/multi-output.Rmd')
library(ISLR)
library(tidyverse)
set.seed(1234) # Random Number Generation
student_grade <- rnorm(32, 7)
student_number <- round(runif(32) *2e6 + 5e6)
programme <- sample(c("Science", "Social Science"), 32, replace = TRUE)
# Create the gg_students data frame
gg_students <- tibble(
number = as.character(student_number),
grade = student_grade,
prog = as.factor(programme)
)
head(gg_students)
ggplot(Hitters, aes(x = HmRun, y = Hits)) +
geom_point() +
labs(x = "Home runs", y = "Hits")
ggplot(Hitters, aes(x = HmRun, y = Hits, size = Salary, color = League)) +
geom_point() +
labs(x = "Home runs", y = "Hits")
#after running > "Warning message: Removed 59 rows containing missing values (geom_point)." => no Salary known?!
gg_students$grade
gg_students %>%
ggplot(aes(x = grade)) +
geom_histogram(binwidth = 0.5)
gg_students %>%
ggplot(aes(x = grade)) +
geom_density(fill = "light seagreen") +
geom_rug(size = 1, colour = "light seagreen")
gg_students %>%
ggplot(aes(x = grade)) +
geom_density(fill = "light seagreen") +
geom_rug(size = 1, colour = "light seagreen")
gg_students %>%
ggplot(aes(x = grade)) +
geom_density(fill = "light seagreen") +
geom_rug(size = 1, colour = "light seagreen")
View(Z_m)
devtools::install_github("ryanoisin/SEset")
library(SEset)
riskcor
EBICglasso_wi(riskcor,n=69)
?EBICglasso_wi
omega<-EBICglasso_wi(riskcor,n=69)
precision_to_path( omega)
test<- precision_to_SEset(omega)
test
remove.packages("SEset")
log(400000)
sqrt(400000)
14.85449 * 60 / 100 * 4
devtools::install_github("tylermorganwall/rayshader")
devtools::install_github("tylermorganwall/rayshader")
install.packages("ps")
devtools::install_github("tylermorganwall/rayshader")
# Use the great rayshader package (www.rayshader.com)
library(rayshader)
# Download data
zip_loc <- tempfile()
download.file("http://geodata.nationaalgeoregister.nl/ahn1/extract/ahn1_100m/ahn1_100.tif.zip",
zip_loc)
local_tif <- raster::raster(unzip(zip_loc, "ahn_100.tif"))
unlink(zip_loc)
# Create matrix of reasonable size
tif_small   <- raster::aggregate(local_tif, fact = 4, FUN = mean)
elmat_small <- matrix(raster::extract(tif_small,
raster::extent(tif_small),
buffer = 1000),
nrow = ncol(tif_small),
ncol = nrow(tif_small))
# Normalize / threshold
elmat_small[elmat_small < -2000000000] <- -10000
elmat_small[elmat_small < -1000]       <- -1000
dim(elmat_small)
min(elmat_small)
elmat <- matrix(-1000, 2000, 2000)
elmat[700:1375, 600:1400] <- elmat_small
elmat[701:1375, 601:1400] <- elmat_small
ambmat <- ambient_shade(elmat, zscale = 3)
raymat <- ray_shade(elmat, zscale = 3, maxsearch = 3000)
elmat %>%
sphere_shade(texture = "imhof3", zscale = 3) %>%
add_shadow(raymat, 0.5) %>%
add_shadow(ambmat, 0.5) %>% plot_3d(elmat, zscale     = 1000,
fov        = 0,
theta      = -30,
phi        = 45)
render_water(elmat, waterdepth = -0.5, zscale = 1000)
render_water(elmat, waterdepth = 0, zscale = 1000)
render_water(elmat, waterdepth = 0.5, zscale = 1000)
render_water(elmat, waterdepth = 10, zscale = 1000)
render_water(elmat, waterdepth = 100, zscale = 1000)
render_water(elmat, waterdepth = 1000, zscale = 1000)
install.packages("harrypotter")
library(harrypotter)
philosophers_stone
png("C:\\Users\\3665364\\surfdrive\\PhD\\Dev\\heightmap\\drown.png", width = 1920, height = 1080)
render_snapshot()
dev.off(()
dev.off()
devtools::install_github("bradleyboehmke/harrypotter")
library(harrypotter)
library(harrypotter)
philosophers_stone
length(philosophers_stone)
str(philosophers_stone)
mat <- rWishart(500)
mat <- rWishart(500, 400, diag(500))
mat <- rWishart(500, 800, diag(500))
ambmat <- ambient_shade(mat, zscale = 3)
library(rayshader)
ambmat <- ambient_shade(mat, zscale = 3)
raymat <- ray_shade(mat, zscale = 3, maxsearch = 300)
mat
dim(mat)
mat <- rWishart(1, 800, diag(500))
ambmat <- ambient_shade(mat, zscale = 3)
mat
mat <- rWishart(1, 800, diag(500))[,,1]
ambmat <- ambient_shade(mat, zscale = 3)
raymat <- ray_shade(mat, zscale = 3, maxsearch = 300)
mat %>%
sphere_shade(texture = "imhof3", zscale = 3) %>%
add_shadow(raymat, 0.5) %>%
add_shadow(ambmat, 0.5) %>%
plot_3d(elma,
zscale     = 1000,
fov        = 0,
theta      = -30,
phi        = 45,
windowsize = c(1920, 1080),
zoom       = 1)
mat %>%
sphere_shade(texture = "imhof3", zscale = 3) %>%
add_shadow(raymat, 0.5) %>%
add_shadow(ambmat, 0.5) %>%
plot_3d(mat,
zscale     = 1000,
fov        = 0,
theta      = -30,
phi        = 45,
windowsize = c(1920, 1080),
zoom       = 1)
rgl::rgl.close()
mat %>%
sphere_shade(texture = "imhof3", zscale = 3) %>%
add_shadow(raymat, 0.5) %>%
add_shadow(ambmat, 0.5) %>%
plot_3d(mat,
zscale     = 3,
fov        = 0,
theta      = -30,
phi        = 45,
windowsize = c(1920, 1080),
zoom       = 1)
rgl::rgl.close()
mat %>%
sphere_shade(texture = "imhof3", zscale = 3) %>%
add_shadow(raymat, 0.5) %>%
add_shadow(ambmat, 0.5) %>%
plot_3d(mat,
zscale     = 3,
fov        = 0,
theta      = -30,
phi        = 45,
windowsize = c(800, 600),
zoom       = 1)
mat %>%
sphere_shade(texture = "desert", zscale = 3) %>%
add_shadow(raymat, 0.5) %>%
add_shadow(ambmat, 0.5) %>%
plot_3d(mat,
zscale     = 30,
fov        = 0,
theta      = -30,
phi        = 45,
windowsize = c(800, 600),
zoom       = 1)
mat %>%
sphere_shade(texture = "desert", zscale = 3) %>%
add_shadow(raymat, 0.5) %>%
add_shadow(ambmat, 0.5) %>%
plot_3d(mat,
zscale     = 300,
fov        = 0,
theta      = -30,
phi        = 45,
windowsize = c(800, 600),
zoom       = 1)
rm(list=ls())
setwd("C:/Users/3665364/surfdrive/PhD/Dev/website/blog")
install.packages(c("manipulate", "Massign"))
install.packages("microbenchmark")
files <- list.files(".")
files <- list.files(".", pattern = "html")
files <- list.files(".", pattern = "html")[-"index.html"]
htmls <- list.files(".", pattern = ".Rmd")
posts <- list.files(".", pattern = ".Rmd")
knitr::knit(posts)
posts <- list.files(".", pattern = ".Rmd")
knitr::knit(posts[1])
for (post in posts) knitr::knit2html(post)
for (post in posts) rmarkdown::render(post)
devtools::install_github("vankesteren/firatheme")
devtools::install_github("vankesteren/firatheme")
for (post in posts) rmarkdown::render(post, clean = TRUE)
devtools::install_github("vankesteren/firatheme")
devtools::install_github("vankesteren/firatheme")
rm(list = ls())
devtools::install_github("vankesteren/firatheme")
install.packages("glue")
devtools::install_github("vankesteren/firatheme")
# Render all the posts in this folder
posts <- list.files(".", pattern = ".Rmd")
for (post in posts) rmarkdown::render(post, clean = TRUE)
install.packages("formatR")
shiny::runGitHub("vankesteren/shapie", launch.browser = TRUE)
